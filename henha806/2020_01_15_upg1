#include <string>
#include <vector>
#include <iostream>
#include <iomanip>

using namespace std;

class Effect
{
public:
    string name{};
    string description{};
};

class Card
{
public:
    Card(Effect const& top, Effect const& bottom, int const initiative)
    : top{top}, bottom{bottom}, initiative{initiative}
    {}

    bool operator <(Card const& other) const
    {
        return initiative < other.initiative;
    }

    string to_string() const
    {
        ostringstream oss {};
        // ...
        return oss.str(); <----------------------------------------------------------------------------
    }
 
private:
    Effect top{};
    Effect bottom{};
    int initiative{};
};

ostream& operator<<(ostream& os, Card const& card) <---------------------------------------------------
{
    os << card.to_string();
    return os;
}

class Hand
{
public:
    void draw(Card const& card)
    {
        cards.push_back(card);
    }

    void print(ostream & os) const// Får inte ta emot os som kopior
    {
        for(Card const& card : cards)
        {
            os << card << endl;
        }
    }

private:
    vector<Card> cards;
};


int main()
{
    Effect aid{"Aid from the Ether", "Heals an ally for 3 health"};
    Effect ally{"Summon Mystic Ally", "Summon minion and gain 2 xp"};
    Effect icelance{"Ice Lance", "Deals 2 damage"};
    Effect ridethewind{"Ride the Wind", "Move 8 spaces"};

    Card card1{aid, ally, 91};
    Card const card2{icelance, ridethewind, 25};
    cout << "Card1:\n" << card1 << '\n' << endl;

    Hand hand{};
    hand.draw(card1);
    hand.draw(card2);
    hand.print(cout); // eller använd operatorn: cout << hand;

    cout << "card1 is less than card2: " << boolalpha << (card1 < card2) << endl;
    cout << "card2 is less than card1: " << boolalpha << (card2 < card1) << endl;

	return 0;       
}